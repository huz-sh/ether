#import "ether2.eth";

global :: 123;

main :: pub (argc hello, argv infd) {
	array [100]int;
	array[0] = 12;

	sys System;
	sys.init();

	if array {
		qw[1] = "Hello" + 2;
		1 + 2;
		if 2 | 23 || 3 && 1 && 2 {
			do_thiSS();
		}
		elif 2 | 3 || 34+ 2 && 893 | 33 || 34 & 23 {
		}
		if wq[8] == 2 {
		}
		elif wq[1] != wq[32] {
		}
		else {
			arr [5]^char;
			if arr[0] <= 3 ||
			   arr[1] >= 5 ||
			   arr[2] > (3 + 3) ||
			   arr[3] < (5 & 3) {
			}
			else {
				arr[2] = arr[2] << 2;
				arr[3 + 2] = 2 >> 1;
				arr[2 * 3] = 3 / 4 % 3;
			}
		}
	}
	
	elif 1 + 2 {
		puts("heello");
		1 + 3 - 3;
		if match {
			err :: 123;
			if err + 2 {
				puts("");
			}
			elif err + 3 {
			}
			elif 32423432 {
				do_something();
				if done {
					puts("good");
				}
			}
			else {
				1 + 's';
				4 - 2;
			}
		}
		else {
		}
	}

	for i = 23 .. 2 + 4 {
		puts("iteration: ");
		putn(i);
	}

	var :: get_var();

	if !var {
		var_2 :: get_var_2();
		if var_2 {
			^var_2 = 2;
			normal_integer :: 123;
			var = &normal_integer;
		}
	}

	arr[2].elem = 3;

	return <char>(<int>('d'));
}

init_global :: pub {
	for i = 1 .. get_sys_count() {
		init_system(get_sys(i));
	}
}

init_private :: {
	{
		return q;
	}
}

struct System {
	code int;
	code2 int;
	done bool;

	init :: pub {
		this.code = 0;
		this.code2 = 0;
		this.done = false;
	}

	do_stuff_internally :: {
		mem :: null;
		if !mem {
			mem = malloc(128);
			switch mem {
				null -> {
					return true;
					return;
				}

				0420433443,
				0435466354 -> {
					return false;
				}

				1, 2, 3, 4, 5, 6, 7 -> {
					return "yes";
				}
			}
		}
	}
}

extern stdout ^FILE;
extern init(done bool) int;
